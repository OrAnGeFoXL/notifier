from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardRemove

from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

from utils.states import AddNotify

from keyboards import reply

from libs.data import write_notify_to_sqlite

from datetime import datetime

router = Router()


message_1="–°–≤—è–∑–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å —Ü–µ–ª—å—é:"


@router.message(Command("addnotify"))
async def description(message: Message, state: FSMContext):
    
    await state.set_state(AddNotify.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:")


@router.message(AddNotify.text)
async def set_time(message: Message, state: FSMContext):

    if len(message.text) > 60:
        await message.answer("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ –Ω–µ –±–æ–ª–µ–µ 60 —Å–∏–º–≤–æ–ª–æ–≤.")
    else:
        await state.update_data(text=message.text)
        await state.set_state(AddNotify.time)
        await message.answer("–í–≤–µ–¥–∏ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 00:00")


@router.message(AddNotify.date)
async def add_date(message: Message, state: FSMContext):

    pass


@router.message(AddNotify.time)
async def add_time(message: Message, state: FSMContext):

    try:
        datetime.strptime(message.text, '%H:%M')
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–∏ÃÜ —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: hh:mm")
        return

    await state.update_data(time=message.text)
    await state.set_state(AddNotify.repeat)
    await message.answer("–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä—è—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ?",
                reply_markup=reply.yes_no_kb(),
                one_time_keyboard=True
                )
    data = await state.get_data()
    text = data.get("time")


@router.message(AddNotify.repeat)
async def add_amount(message: Message, state: FSMContext):

    await state.update_data(repeat=message.text)
    if message.text == "–î–∞":
        await state.set_state(AddNotify.repeat_frq)
        await message.answer("–ö–∞–∫ —á–∞—Å—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä—è—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ?",
                reply_markup=reply.repeat_frq_kb(),
                one_time_keyboard=True
                )
    elif message.text == "–ù–µ—Ç":
        await state.update_data(repeat_frq="–ù–∏–∫–æ–≥–¥–∞")
        await state.set_state(AddNotify.task)
        await message.answer(message_1,
                reply_markup=reply.yes_no_kb(),
                one_time_keyboard=True
                )
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.\n–í–≤–µ–¥–∏—Ç–µ –î–∞ –∏–ª–∏ –ù–µ—Ç")


@router.message(AddNotify.repeat_frq)
async def add_frq(message: Message, state: FSMContext):
    
    await state.update_data(repeat_frq=message.text, reply_markup=reply.yes_no_kb())
    await state.set_state(AddNotify.task)

    await message.answer(message_1,
            reply_markup=reply.yes_no_kb(),
            one_time_keyboard=True
            )


async def approve_fnc(message: Message, state: FSMContext):

    await state.update_data(task=message.text)
       
    data = await state.get_data()
    text = data.get("text")
    time = data.get("time")
    repeat = data.get("repeat")
    repeat_frq = data.get("repeat_frq")
    task = data.get("task")
       
    await message.answer(
        f"–í—Ä–µ–º—è: <b>{time}</b>\n–¢–µ–∫—Å—Ç: <b>{text}</b>\n–ü–æ–≤—Ç–æ—Ä—è—Ç—å: <b>{repeat}</b> \n–ß–∞—Å—Ç–æ—Ç–∞: <b>{repeat_frq}</b> \n–ó–∞–¥–∞—á–∞: <b>{task}</b>",
          parse_mode="HTML")
    await message.answer("–í—Å–µ –≤–µ—Ä–Ω–æ?", reply_markup=reply.yes_no_kb())


@router.message(AddNotify.task) 
async def add_frq(message: Message, state: FSMContext):

    if message.text == "–î–∞":
        await state.update_data(task=message.text)
        await state.set_state(AddNotify.approve)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É", reply_markup=reply.yes_no_kb())

    elif message.text == "–ù–µ—Ç":
        await state.update_data(task=message.text)
        await state.set_state(AddNotify.approve)
        await approve_fnc(message, state)
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.\n–í–≤–µ–¥–∏—Ç–µ –î–∞ –∏–ª–∏ –ù–µ—Ç") 
    

@router.message(AddNotify.approve, F.text == "–î–∞")
async def approve(message: Message, state: FSMContext):
    await write_notify_to_sqlite(state, message)
    print(message)
    await state.clear()
    await message.answer("‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ \n–í–≤–µ–¥–∏—Ç–µ /addnotify —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", reply_markup=ReplyKeyboardRemove())


@router.message(AddNotify.approve, F.text == "–ù–µ—Ç")
async def cancel(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("üö´ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ \n–í–≤–µ–¥–∏—Ç–µ /addnotify —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", reply_markup=ReplyKeyboardRemove())





